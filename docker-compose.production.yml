# Production Docker Compose for BookReader AI
# Note: version field is obsolete in modern Docker Compose

services:
  # Nginx Reverse Proxy с SSL и load balancing
  nginx:
    image: nginx:1.25-alpine
    container_name: bookreader_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./backend/storage:/var/www/storage:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bookreader_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  # Frontend Production Build
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${DOMAIN_URL:-http://localhost}/api/v1
        - VITE_WS_URL=${DOMAIN_URL:-http://localhost}/ws
        - VITE_APP_NAME=BookReader AI
    container_name: bookreader_frontend
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - bookreader_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: bookreader_backend
    environment:
      # Database
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      
      # Redis
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # Environment
      - DEBUG=false
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # CORS and Domain
      - CORS_ORIGINS=${DOMAIN_URL:-http://localhost}
      - ALLOWED_HOSTS=${DOMAIN_NAME:-localhost},localhost,127.0.0.1
      
      # AI Services
      - POLLINATIONS_ENABLED=${POLLINATIONS_ENABLED:-true}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      
      # Performance
      - WORKERS_COUNT=${WORKERS_COUNT:-4}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-52428800}
      
    volumes:
      - ./backend/storage:/app/storage
      - ./logs/backend:/app/logs
      - /dev/shm:/dev/shm  # Shared memory for Gunicorn
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bookreader_network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: bookreader_celery
    command: >
      celery -A app.core.celery_app worker 
      --loglevel=${LOG_LEVEL:-info} 
      --concurrency=${CELERY_CONCURRENCY:-2} 
      --max-tasks-per-child=1000
      --max-memory-per-child=200000
      --prefetch-multiplier=1
    environment:
      # Database & Redis
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - POLLINATIONS_ENABLED=${POLLINATIONS_ENABLED:-true}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./backend/storage:/app/storage
      - ./logs/celery:/app/logs
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bookreader_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: bookreader_beat
    command: >
      celery -A app.core.celery_app beat 
      --loglevel=${LOG_LEVEL:-info} 
      --schedule=/tmp/celerybeat-schedule
      --pidfile=/tmp/celerybeat.pid
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs/beat:/app/logs
      - beat_schedule:/tmp  # Persistent schedule storage
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bookreader_network
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # PostgreSQL Database with optimization
  postgres:
    image: postgres:15-alpine
    container_name: bookreader_postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c temp_file_limit=2GB
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log
    restart: unless-stopped
    networks:
      - bookreader_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis with persistence and optimization
  redis:
    image: redis:7-alpine
    container_name: bookreader_redis
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD} 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1 60 100 10 10000
      --dbfilename dump.rdb
      --appendfilename appendonly.aof
      --tcp-keepalive 300
      --timeout 0
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log
    restart: unless-stopped
    networks:
      - bookreader_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Log Management with rotation
  logrotate:
    image: linkyard/docker-logrotate
    container_name: bookreader_logrotate
    volumes:
      - ./logs:/logs
      - ./logrotate/logrotate.conf:/etc/logrotate.conf:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  # Watchtower for auto-updates (опционально)
  watchtower:
    image: containrrr/watchtower
    container_name: bookreader_watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      --interval 86400 
      --cleanup 
      --label-enable
      --notifications-level info
      --include-stopped
      --revive-stopped
    restart: unless-stopped
    environment:
      - WATCHTOWER_NOTIFICATIONS=${WATCHTOWER_NOTIFICATIONS:-}
      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${SLACK_WEBHOOK_URL:-}
      - WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=BookReader-AI
      - WATCHTOWER_DEBUG=${WATCHTOWER_DEBUG:-false}
    profiles:
      - watchtower
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  beat_schedule:
    driver: local

networks:
  bookreader_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-bookreader