version: '3.8'

services:
  # Nginx Reverse Proxy с SSL
  nginx:
    image: nginx:alpine
    container_name: bookreader_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./backend/storage:/var/www/storage:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - bookreader_network

  # Frontend Production Build
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${DOMAIN_URL}/api/v1
        - VITE_WS_URL=${DOMAIN_URL}/ws
        - VITE_APP_NAME=BookReader AI
    container_name: bookreader_frontend
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - bookreader_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: bookreader_backend
    environment:
      # Database
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      
      # Redis
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      
      # Environment
      - DEBUG=false
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      
      # CORS and Domain
      - CORS_ORIGINS=${DOMAIN_URL}
      - ALLOWED_HOSTS=${DOMAIN_NAME},localhost
      
      # AI Services
      - POLLINATIONS_ENABLED=true
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      
      # File uploads
      - MAX_FILE_SIZE=52428800
      
    volumes:
      - ./backend/storage:/app/storage
      - ./logs/backend:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bookreader_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: bookreader_celery
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=2 --max-tasks-per-child=1000
    environment:
      # Database & Redis (same as backend)
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - POLLINATIONS_ENABLED=true
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - LOG_LEVEL=INFO
    volumes:
      - ./backend/storage:/app/storage
      - ./logs/celery:/app/logs
    depends_on:
      - backend
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - bookreader_network

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: bookreader_beat
    command: celery -A app.core.celery_app beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./logs/beat:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - bookreader_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bookreader_postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log
    restart: unless-stopped
    networks:
      - bookreader_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis
  redis:
    image: redis:7-alpine
    container_name: bookreader_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log
    restart: unless-stopped
    networks:
      - bookreader_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Log Management
  logrotate:
    image: linkyard/docker-logrotate
    container_name: bookreader_logrotate
    volumes:
      - ./logs:/logs
      - ./logrotate/logrotate.conf:/etc/logrotate.conf:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

  # Auto-updater (опционально)
  watchtower:
    image: containrrr/watchtower
    container_name: bookreader_watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 86400 --cleanup --label-enable
    restart: unless-stopped
    environment:
      - WATCHTOWER_NOTIFICATIONS=slack
      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${SLACK_WEBHOOK_URL:-}

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  bookreader_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16