name: Type Check

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**/*.py'
      - 'backend/mypy.ini'
      - 'backend/requirements.txt'
      - '.github/workflows/type-check.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**/*.py'
      - 'backend/mypy.ini'
      - 'backend/requirements.txt'

jobs:
  mypy:
    name: MyPy Type Checking
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run mypy
        run: |
          cd backend
          mypy app/ --config-file=mypy.ini --no-error-summary --show-column-numbers

      - name: Generate mypy report
        if: always()
        run: |
          cd backend
          mypy app/ --config-file=mypy.ini --html-report ./mypy-report --no-error-summary || true

      - name: Upload mypy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mypy-report
          path: backend/mypy-report/
          retention-days: 7

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            let output = '';
            try {
              output = execSync('cd backend && mypy app/ --config-file=mypy.ini 2>&1', {encoding: 'utf-8'});
            } catch (error) {
              output = error.stdout;
            }

            const body = `## MyPy Type Check Results\n\n\`\`\`\n${output}\n\`\`\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  type-coverage:
    name: Type Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Calculate type coverage
        id: coverage
        run: |
          cd backend

          # Подсчет функций с type hints
          total_functions=$(grep -r "def " app --include="*.py" | wc -l)
          typed_functions=$(grep -r "def.*->.*:" app --include="*.py" | wc -l)

          # Подсчет ошибок mypy
          mypy_errors=$(mypy app/ --config-file=mypy.ini 2>&1 | grep "Found" | tail -1 | grep -o '[0-9]\+' | head -1 || echo "0")

          # Вычисление процента
          if [ "$total_functions" -gt 0 ]; then
            coverage=$((typed_functions * 100 / total_functions))
          else
            coverage=0
          fi

          echo "total_functions=$total_functions" >> $GITHUB_OUTPUT
          echo "typed_functions=$typed_functions" >> $GITHUB_OUTPUT
          echo "coverage=$coverage" >> $GITHUB_OUTPUT
          echo "mypy_errors=$mypy_errors" >> $GITHUB_OUTPUT

      - name: Create coverage badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: your-gist-id-here
          filename: type-coverage.json
          label: Type Coverage
          message: ${{ steps.coverage.outputs.coverage }}%
          color: ${{ steps.coverage.outputs.coverage > 80 && 'green' || steps.coverage.outputs.coverage > 60 && 'yellow' || 'red' }}

      - name: Summary
        run: |
          echo "## Type Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Functions | ${{ steps.coverage.outputs.total_functions }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Typed Functions | ${{ steps.coverage.outputs.typed_functions }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Coverage | ${{ steps.coverage.outputs.coverage }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| MyPy Errors | ${{ steps.coverage.outputs.mypy_errors }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.coverage.outputs.coverage }}" -lt 80 ]; then
            echo "⚠️ **Warning:** Type coverage is below 80% target" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Type coverage meets quality standards" >> $GITHUB_STEP_SUMMARY
          fi
