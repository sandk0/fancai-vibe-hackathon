[mypy]
python_version = 3.11
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = False
disallow_incomplete_defs = False
check_untyped_defs = True
disallow_untyped_decorators = False
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = False
warn_no_return = True
warn_unreachable = True
strict_equality = True
ignore_missing_imports = True

# SQLAlchemy specific - Base class from declarative_base()
[mypy-app.models.*]
disable_error_code = valid-type, misc

# Ignore Column return type issues (SQLAlchemy internals)
[mypy-app.models.user]
disable_error_code = valid-type, misc, return-value

[mypy-app.models.book]
disable_error_code = valid-type, misc, return-value, call-overload

[mypy-app.models.description]
disable_error_code = valid-type, misc, return-value, call-overload, var-annotated

[mypy-app.models.image]
disable_error_code = valid-type, misc, return-value

[mypy-app.models.chapter]
disable_error_code = valid-type, misc, return-value

# Redis async issues
[mypy-app.core.rate_limiter]
disable_error_code = misc

# Strategy factory type narrowing
[mypy-app.services.nlp.strategies.strategy_factory]
disable_error_code = assignment, var-annotated

# Parallel strategy async comprehension
[mypy-app.services.nlp.strategies.parallel_strategy]
disable_error_code = arg-type, var-annotated

# Base strategy grouping
[mypy-app.services.nlp.strategies.base_strategy]
disable_error_code = var-annotated

# Ensemble voter
[mypy-app.services.nlp.components.ensemble_voter]
disable_error_code = var-annotated
