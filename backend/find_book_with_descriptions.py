#!/usr/bin/env python3
"""
–ù–∞—Ö–æ–¥–∏—Ç –∫–Ω–∏–≥—É —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –µ—ë —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
"""

import sys
import os
import asyncio

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.database import AsyncSessionLocal
from app.models.user import User
from app.models.book import Book
from app.models.chapter import Chapter
from app.models.description import Description
from sqlalchemy import select, func

async def find_and_assign_book_with_descriptions():
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–Ω–∏–≥—É —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –µ—ë —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    
    print("üîß –ü–û–ò–°–ö –ö–ù–ò–ì–ò –° –û–ü–ò–°–ê–ù–ò–Ø–ú–ò")
    print("=" * 50)
    
    test_email = "test@example.com"
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await db.execute(
            select(User).where(User.email == test_email)
        )
        test_user = user_result.scalar_one_or_none()
        
        if not test_user:
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_email} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {test_user.email}")
        print(f"   ID: {test_user.id}")
        
        # –ò—â–µ–º –∫–Ω–∏–≥–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        result = await db.execute(
            select(Book, func.count(Description.id))
            .join(Chapter, Book.id == Chapter.book_id)
            .join(Description, Chapter.id == Description.chapter_id)
            .group_by(Book.id)
            .order_by(func.count(Description.id).desc())
        )
        
        books_with_descriptions = result.fetchall()
        
        print(f"\nüìä –ù–ê–ô–î–ï–ù–û –ö–ù–ò–ì –° –û–ü–ò–°–ê–ù–ò–Ø–ú–ò: {len(books_with_descriptions)}")
        
        if not books_with_descriptions:
            print("‚ùå –ù–µ—Ç –∫–Ω–∏–≥ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏")
            return
        
        for book, desc_count in books_with_descriptions:
            print(f"   üìö {book.title[:50]}... - {desc_count} –æ–ø–∏—Å–∞–Ω–∏–π")
        
        # –ë–µ—Ä—ë–º –∫–Ω–∏–≥—É —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–ø–∏—Å–∞–Ω–∏–π
        best_book, desc_count = books_with_descriptions[0]
        print(f"\nüéØ –í–´–ë–ò–†–ê–ï–ú –ö–ù–ò–ì–£: {best_book.title}")
        print(f"   ID: {best_book.id}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–π: {desc_count}")
        print(f"   –¢–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü: {best_book.user_id}")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        best_book.user_id = test_user.id
        await db.commit()
        await db.refresh(best_book)
        
        print(f"‚úÖ –ö–Ω–∏–≥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        print(f"   –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: {best_book.user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É
        chapter_result = await db.execute(
            select(Chapter)
            .where(Chapter.book_id == best_book.id)
            .order_by(Chapter.chapter_number)
            .limit(1)
        )
        first_chapter = chapter_result.scalar_one_or_none()
        
        if first_chapter:
            # –°—á–∏—Ç–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤ –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤–µ
            desc_result = await db.execute(
                select(func.count(Description.id))
                .where(Description.chapter_id == first_chapter.id)
            )
            desc_count_chapter = desc_result.scalar()
            
            print(f"\nüìÑ –ü–ï–†–í–ê–Ø –ì–õ–ê–í–ê:")
            print(f"   –ù–æ–º–µ—Ä: {first_chapter.chapter_number}")
            print(f"   ID: {first_chapter.id}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–π: {desc_count_chapter}")
        
        print(f"\nüéâ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API:")
        print(f"   Book ID: {best_book.id}")
        print(f"   Chapter: 1")
        print(f"   User: {test_user.email}")
        print(f"   Password: testpassword123")

if __name__ == "__main__":
    asyncio.run(find_and_assign_book_with_descriptions())