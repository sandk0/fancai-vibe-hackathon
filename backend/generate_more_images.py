#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import sys
import os
import asyncio

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.database import AsyncSessionLocal
from app.models.description import Description
from app.models.image import GeneratedImage
from app.models.user import User
from app.services.image_generator import image_generator_service
from sqlalchemy import select

async def generate_multiple_images():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π."""
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await db.execute(select(User).limit(1))
        user = user_result.scalar_one_or_none()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –æ–ø–∏—Å–∞–Ω–∏–π –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        result = await db.execute(
            select(Description)
            .where(Description.is_suitable_for_generation == True)
            .where(~Description.id.in_(
                select(GeneratedImage.description_id)
            ))
            .order_by(Description.priority_score.desc())
            .limit(5)
        )
        
        descriptions = result.scalars().all()
        if not descriptions:
            print("‚ùå –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return
        
        print(f"üé® –ù–∞–π–¥–µ–Ω–æ {len(descriptions)} –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        generated_count = 0
        
        for i, description in enumerate(descriptions, 1):
            print(f"\n[{i}/{len(descriptions)}] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            print(f"   –¢–∏–ø: {description.type.value}")
            print(f"   –¢–µ–∫—Å—Ç: {description.content[:80]}...")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {description.priority_score}")
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                result = await image_generator_service.generate_image_for_description(
                    description=description,
                    user_id=str(user.id)
                )
                
                if result.success:
                    print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {result.generation_time_seconds:.1f}—Å")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    generated_image = GeneratedImage(
                        description_id=description.id,
                        user_id=user.id,
                        service_used="pollinations.ai",
                        image_url=result.image_url,
                        local_path=result.local_path,
                        prompt_used=f"Generated for {description.type.value}",
                        generation_time_seconds=result.generation_time_seconds
                    )
                    
                    db.add(generated_image)
                    await db.commit()
                    generated_count += 1
                    print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
                    
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.error_message}")
                    
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        print(f"\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ {generated_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

if __name__ == "__main__":
    print("=" * 60)
    print("–ì–ï–ù–ï–†–ê–¶–ò–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    asyncio.run(generate_multiple_images())