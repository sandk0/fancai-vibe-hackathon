#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API.
"""

import sys
import os
import asyncio

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.database import AsyncSessionLocal
from app.models.user import User
from app.services.auth_service import auth_service
from sqlalchemy import select

async def create_test_user():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º."""
    
    print("üîß –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 40)
    
    test_email = "test@example.com"
    test_password = "testpassword123"
    
    async with AsyncSessionLocal() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user_result = await db.execute(
            select(User).where(User.email == test_email)
        )
        existing_user = existing_user_result.scalar_one_or_none()
        
        if existing_user:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print(f"   ID: {existing_user.id}")
            print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {existing_user.is_active}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            existing_user.password_hash = auth_service.get_password_hash(test_password)
            await db.commit()
            print(f"   üîë –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {test_password}")
            
        else:
            print(f"‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {test_email}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                email=test_email,
                password_hash=auth_service.get_password_hash(test_password),
                full_name="Test User",
                is_active=True,
                is_verified=True,
                is_admin=False
            )
            
            db.add(test_user)
            await db.commit()
            await db.refresh(test_user)
            
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   ID: {test_user.id}")
            print(f"   Email: {test_user.email}")
            print(f"   Password: {test_password}")
        
        print("\nüìã –î–ê–ù–ù–´–ï –î–õ–Ø –í–•–û–î–ê:")
        print(f"   Email: {test_email}")
        print(f"   Password: {test_password}")

if __name__ == "__main__":
    asyncio.run(create_test_user())