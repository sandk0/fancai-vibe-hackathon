"""
Performance & Load Tests –¥–ª—è Reading Sessions API.

–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Locust –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
100+ concurrent users.

Metrics:
- Throughput (requests/sec)
- Latency (p50, p95, p99)
- Error rate
- Connection pool usage
- Redis cache hit rate

Run:
    locust -f tests/performance/test_reading_sessions_load.py --host=http://localhost:8000
"""

import random
import logging
from uuid import uuid4
from typing import Optional

try:
    from locust import HttpUser, task, between, events
    from locust.env import Environment
except ImportError:
    print("‚ö†Ô∏è  Locust –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install locust")
    print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω Locust.")
    exit(1)

logger = logging.getLogger(__name__)


# ============================================================================
# Test Configuration
# ============================================================================

# Test user credentials (–Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ –ë–î –∑–∞—Ä–∞–Ω–µ–µ)
TEST_USERS = [
    {"email": f"test_user_{i}@example.com", "password": "test_password_123"}
    for i in range(10)
]

# Test books (–Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ)
TEST_BOOK_IDS = []  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ setUp


# ============================================================================
# Locust User Classes
# ============================================================================


class ReadingSessionUser(HttpUser):
    """
    –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —á–∏—Ç–∞–µ—Ç –∫–Ω–∏–≥–∏.

    Behavior:
    1. –õ–æ–≥–∏–Ω–∏—Ç—Å—è (–ø–æ–ª—É—á–∞–µ—Ç JWT token)
    2. –°—Ç–∞—Ä—Ç—É–µ—Ç —Å–µ—Å—Å–∏—é —á—Ç–µ–Ω–∏—è (30% weight)
    3. –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–∞–∂–¥—ã–µ 5-10 —Å–µ–∫—É–Ω–¥ (50% weight)
    4. –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é (10% weight)
    5. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é (10% weight)
    """

    wait_time = between(5, 10)  # –ñ–¥–µ—Ç 5-10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    weight = 3  # 75% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —á–∏—Ç–∞—Ç–µ–ª–∏

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.token: Optional[str] = None
        self.session_id: Optional[str] = None
        self.current_position: int = 0

    def on_start(self):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ user instance.

        –õ–æ–≥–∏–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ—Ç JWT token.
        """
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_creds = random.choice(TEST_USERS)

        # Login
        with self.client.post(
            "/api/v1/auth/login",
            json={
                "username": user_creds["email"],
                "password": user_creds["password"],
            },
            catch_response=True,
        ) as response:
            if response.status_code == 200:
                self.token = response.json().get("access_token")
                response.success()
            else:
                response.failure(f"Login failed: {response.text}")

    @property
    def headers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç headers —Å JWT token."""
        if self.token:
            return {"Authorization": f"Bearer {self.token}"}
        return {}

    @task(3)
    def start_reading_session(self):
        """
        –°—Ç–∞—Ä—Ç—É–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á—Ç–µ–Ω–∏—è.

        Weighted: 30% requests
        """
        if not TEST_BOOK_IDS:
            return

        book_id = random.choice(TEST_BOOK_IDS)

        with self.client.post(
            "/api/v1/reading-sessions/start",
            json={
                "book_id": book_id,
                "start_position": 0,
                "device_type": random.choice(["mobile", "tablet", "desktop"]),
            },
            headers=self.headers,
            catch_response=True,
            name="/api/v1/reading-sessions/start",
        ) as response:
            if response.status_code == 201:
                data = response.json()
                self.session_id = data.get("id")
                self.current_position = data.get("start_position", 0)
                response.success()
            else:
                response.failure(f"Start session failed: {response.text}")

    @task(5)
    def update_reading_position(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.

        Weighted: 50% requests (most frequent operation)
        """
        if not self.session_id:
            # –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é
            self.start_reading_session()
            return

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 1-5%)
        self.current_position = min(100, self.current_position + random.randint(1, 5))

        with self.client.put(
            f"/api/v1/reading-sessions/{self.session_id}/update",
            json={"current_position": self.current_position},
            headers=self.headers,
            catch_response=True,
            name="/api/v1/reading-sessions/{id}/update",
        ) as response:
            if response.status_code == 200:
                response.success()
            else:
                response.failure(f"Update position failed: {response.text}")

    @task(1)
    def end_reading_session(self):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —á—Ç–µ–Ω–∏—è.

        Weighted: 10% requests
        """
        if not self.session_id:
            return

        with self.client.put(
            f"/api/v1/reading-sessions/{self.session_id}/end",
            json={"end_position": self.current_position},
            headers=self.headers,
            catch_response=True,
            name="/api/v1/reading-sessions/{id}/end",
        ) as response:
            if response.status_code == 200:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º session_id
                self.session_id = None
                self.current_position = 0
                response.success()
            else:
                response.failure(f"End session failed: {response.text}")

    @task(1)
    def get_reading_history(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–π —á—Ç–µ–Ω–∏—è.

        Weighted: 10% requests
        """
        with self.client.get(
            "/api/v1/reading-sessions/history",
            params={"limit": 20},  # Cursor-based pagination
            headers=self.headers,
            catch_response=True,
            name="/api/v1/reading-sessions/history",
        ) as response:
            if response.status_code == 200:
                response.success()
            else:
                response.failure(f"Get history failed: {response.text}")


class BurstUser(HttpUser):
    """
    –°–∏–º—É–ª—è—Ü–∏—è burst traffic - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–æ.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting –∏ connection pool.
    """

    wait_time = between(1, 2)  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    weight = 1  # 25% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - burst users

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.token: Optional[str] = None

    def on_start(self):
        """Login –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ token."""
        user_creds = random.choice(TEST_USERS)

        response = self.client.post(
            "/api/v1/auth/login",
            json={
                "username": user_creds["email"],
                "password": user_creds["password"],
            },
        )

        if response.status_code == 200:
            self.token = response.json().get("access_token")

    @property
    def headers(self):
        if self.token:
            return {"Authorization": f"Bearer {self.token}"}
        return {}

    @task
    def rapid_fire_requests(self):
        """
        –î–µ–ª–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
        for _ in range(5):
            self.client.get(
                "/api/v1/reading-sessions/active",
                headers=self.headers,
                name="/api/v1/reading-sessions/active (burst)",
            )


# ============================================================================
# Event Listeners –¥–ª—è –º–µ—Ç—Ä–∏–∫
# ============================================================================


@events.test_start.add_listener
def on_test_start(environment: Environment, **kwargs):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ load test.

    –í—ã–≤–æ–¥–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∞.
    """
    print("\n" + "=" * 80)
    print("üöÄ READING SESSIONS LOAD TEST STARTED")
    print("=" * 80)
    print(f"Target: {environment.host}")
    print(f"Users: {environment.runner.user_count if hasattr(environment.runner, 'user_count') else 'N/A'}")
    print("=" * 80 + "\n")


@events.test_stop.add_listener
def on_test_stop(environment: Environment, **kwargs):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ load test.

    –í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    print("\n" + "=" * 80)
    print("üèÅ READING SESSIONS LOAD TEST COMPLETED")
    print("=" * 80)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Locust stats
    stats = environment.stats

    print(f"\nTotal Requests: {stats.total.num_requests}")
    print(f"Total Failures: {stats.total.num_failures}")
    print(f"Failure Rate: {stats.total.fail_ratio * 100:.2f}%")
    print(f"\nAverage Response Time: {stats.total.avg_response_time:.2f}ms")
    print(f"Median Response Time (p50): {stats.total.get_response_time_percentile(0.5):.2f}ms")
    print(f"95th Percentile (p95): {stats.total.get_response_time_percentile(0.95):.2f}ms")
    print(f"99th Percentile (p99): {stats.total.get_response_time_percentile(0.99):.2f}ms")
    print(f"\nRequests/sec: {stats.total.total_rps:.2f}")

    print("=" * 80 + "\n")

    # Success criteria (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è CI/CD)
    success_criteria = [
        ("Error Rate < 1%", stats.total.fail_ratio < 0.01),
        ("p95 Latency < 100ms", stats.total.get_response_time_percentile(0.95) < 100),
        ("p99 Latency < 200ms", stats.total.get_response_time_percentile(0.99) < 200),
        ("RPS > 50", stats.total.total_rps > 50),
    ]

    print("üìä SUCCESS CRITERIA:")
    all_passed = True
    for criteria, passed in success_criteria:
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        print(f"  {status}: {criteria}")
        if not passed:
            all_passed = False

    if all_passed:
        print("\nüéâ All performance criteria met!")
    else:
        print("\n‚ö†Ô∏è  Some performance criteria not met. Review optimization.")

    print("=" * 80 + "\n")


# ============================================================================
# CLI Instructions
# ============================================================================

if __name__ == "__main__":
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                   Reading Sessions Performance Tests                      ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    –î–ª—è –∑–∞–ø—É—Å–∫–∞ load tests:

    1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω:
       docker-compose up backend redis postgres

    2. –°–æ–∑–¥–∞–π—Ç–µ test users –∏ test books:
       python scripts/setup_load_test_data.py

    3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Locust:
       locust -f tests/performance/test_reading_sessions_load.py --host=http://localhost:8000

    4. –û—Ç–∫—Ä–æ–π—Ç–µ Locust web UI:
       http://localhost:8089

    5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
       - Number of users: 100 (concurrent users)
       - Spawn rate: 10 (users/sec)
       - Host: http://localhost:8000

    6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ real-time

    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ - headless —Ä–µ–∂–∏–º (CI/CD):

    locust -f tests/performance/test_reading_sessions_load.py \\
           --host=http://localhost:8000 \\
           --users 100 \\
           --spawn-rate 10 \\
           --run-time 5m \\
           --headless

    ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    """)
