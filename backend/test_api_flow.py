#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API flow –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π.
"""

import sys
import os
import asyncio
import httpx
import json

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.database import AsyncSessionLocal
from app.models.description import Description
from app.models.image import GeneratedImage
from app.models.book import Book
from app.models.chapter import Chapter
from app.models.user import User
from sqlalchemy import select
from uuid import UUID

async def test_api_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å API flow –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ HTTP –æ—Ç–≤–µ—Ç–∞."""
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API FLOW")
    print("=" * 50)
    
    async with AsyncSessionLocal() as db:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥—É —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ (Witcher book)
        witcher_book_id = UUID("c1347ad0-9a13-4564-8e08-2dad21408dc4")
        book_result = await db.execute(select(Book).where(Book.id == witcher_book_id))
        book = book_result.scalar_one_or_none()
        if not book:
            print("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        print(f"   –ö–Ω–∏–≥–∞: {book.title[:50]}...")
        print(f"   ID: {book.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É —ç—Ç–æ–π –∫–Ω–∏–≥–∏
        chapter_result = await db.execute(
            select(Chapter)
            .where(Chapter.book_id == book.id)
            .order_by(Chapter.chapter_number)
            .limit(1)
        )
        chapter = chapter_result.scalar_one_or_none()
        if not chapter:
            print("‚ùå –ì–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        print(f"   –ì–ª–∞–≤–∞: #{chapter.chapter_number} - {chapter.title[:50] if chapter.title else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}...")
        print(f"   ID: {chapter.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –≥–ª–∞–≤—ã
        descriptions_result = await db.execute(
            select(Description, GeneratedImage)
            .outerjoin(GeneratedImage, Description.id == GeneratedImage.description_id)
            .where(Description.chapter_id == chapter.id)
            .order_by(Description.priority_score.desc())
        )
        
        descriptions_data = descriptions_result.all()
        print(f"   –û–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î: {len(descriptions_data)}")
        
        if descriptions_data:
            for i, (desc, img) in enumerate(descriptions_data[:3], 1):
                print(f"     {i}. {desc.type.value}: {desc.content[:50]}... (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {desc.priority_score})")
                if img:
                    print(f"        üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img.image_url[:60]}...")
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –Ω–∞–ø—Ä—è–º—É—é
        print(f"\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/v1/books/{book.id}/chapters/{chapter.chapter_number}")
        
        try:
            async with httpx.AsyncClient() as client:
                # –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                response = await client.get(
                    f"http://localhost:8000/api/v1/books/{book.id}/chapters/{chapter.chapter_number}"
                )
                
                print(f"   Status Code: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    
                    print(f"   –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:")
                    print(f"     - id: {data.get('id', '–ù–ï–¢')}")
                    print(f"     - chapter_number: {data.get('chapter_number', '–ù–ï–¢')}")
                    print(f"     - title: {data.get('title', '–ù–ï–¢')}")
                    print(f"     - content –¥–ª–∏–Ω–∞: {len(data.get('content', ''))}")
                    
                    # –ì–ª–∞–≤–Ω–æ–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º descriptions
                    descriptions = data.get('descriptions', [])
                    print(f"     - descriptions: {len(descriptions)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    if descriptions:
                        print("   üéâ –û–ü–ò–°–ê–ù–ò–Ø –ù–ê–ô–î–ï–ù–´ –í API –û–¢–í–ï–¢–ï!")
                        for i, desc in enumerate(descriptions[:3], 1):
                            print(f"     {i}. {desc.get('type')}: {desc.get('content', '')[:50]}...")
                            if desc.get('generated_image'):
                                print(f"        üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {desc['generated_image'].get('image_url', '')[:60]}...")
                    else:
                        print("   ‚ùå –û–ü–ò–°–ê–ù–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–´ –í API –û–¢–í–ï–¢–ï!")
                        print("   –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                        print(json.dumps(data, ensure_ascii=False, indent=2)[:1000])
                
                elif response.status_code == 401:
                    print("   ‚ùå 401 - –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                    print("   –í–æ–∑–º–æ–∂–Ω–æ, —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç JWT —Ç–æ–∫–µ–Ω")
                
                elif response.status_code == 404:
                    print("   ‚ùå 404 - –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        print(f"\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await db.execute(select(User).where(User.email == "test@example.com"))
        user = user_result.scalar_one_or_none()
        if user:
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}")
            
            try:
                async with httpx.AsyncClient() as client:
                    # –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                    login_response = await client.post(
                        "http://localhost:8000/api/v1/auth/login",
                        json={"email": user.email, "password": "testpassword123"}
                    )
                    
                    print(f"   –õ–æ–≥–∏–Ω - Status: {login_response.status_code}")
                    if login_response.status_code == 200:
                        token_data = login_response.json()
                        print(f"   –û—Ç–≤–µ—Ç –ª–æ–≥–∏–Ω–∞: {token_data}")
                        access_token = token_data.get("tokens", {}).get("access_token")
                        
                        if access_token:
                            print(f"   ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                            
                            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º
                            headers = {"Authorization": f"Bearer {access_token}"}
                            auth_response = await client.get(
                                f"http://localhost:8000/api/v1/books/{book.id}/chapters/{chapter.chapter_number}",
                                headers=headers
                            )
                            
                            print(f"   –° —Ç–æ–∫–µ–Ω–æ–º - Status: {auth_response.status_code}")
                            
                            if auth_response.status_code == 200:
                                auth_data = auth_response.json()
                                auth_descriptions = auth_data.get('descriptions', [])
                                print(f"   –° —Ç–æ–∫–µ–Ω–æ–º - descriptions: {len(auth_descriptions)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                                
                                if auth_descriptions:
                                    print("   üéâ –° –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ï–ô –û–ü–ò–°–ê–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!")
                                else:
                                    print("   ‚ùå –î–∞–∂–µ —Å —Ç–æ–∫–µ–Ω–æ–º –æ–ø–∏—Å–∞–Ω–∏—è –ø—É—Å—Ç—ã–µ")
                        else:
                            print("   ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                    else:
                        print(f"   ‚ùå –õ–æ–≥–∏–Ω –Ω–µ—É–¥–∞—á–µ–Ω: {login_response.status_code}")
                        print(f"   –û—Ç–≤–µ—Ç: {login_response.text}")
                        
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        
        else:
            print("   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    asyncio.run(test_api_flow())