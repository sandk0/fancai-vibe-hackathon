#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π.
"""

import sys
import os
import asyncio

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.database import AsyncSessionLocal
from app.models.description import Description
from app.models.image import GeneratedImage
from app.models.user import User
from app.services.image_generator import image_generator_service
from sqlalchemy import select

async def test_image_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è."""
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await db.execute(select(User).limit(1))
        user = user_result.scalar_one_or_none()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ LOCATION
        result = await db.execute(
            select(Description)
            .where(Description.type == 'LOCATION')
            .where(Description.is_suitable_for_generation == True)
            .order_by(Description.priority_score.desc())
            .limit(1)
        )
        
        description = result.scalar_one_or_none()
        if not description:
            print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è:")
        print(f"   –¢–∏–ø: {description.type.value}")
        print(f"   –¢–µ–∫—Å—Ç: {description.content[:100]}...")
        print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {description.priority_score}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        existing_image = await db.execute(
            select(GeneratedImage).where(GeneratedImage.description_id == description.id)
        )
        if existing_image.scalar_one_or_none():
            print("üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            print("üîÑ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
            result = await image_generator_service.generate_image_for_description(
                description=description,
                user_id=str(user.id)
            )
            
            if result.success:
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
                print(f"   URL: {result.image_url}")
                print(f"   –í—Ä–µ–º—è: {result.generation_time_seconds:.1f}—Å")
                print(f"   –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {result.local_path}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                generated_image = GeneratedImage(
                    description_id=description.id,
                    user_id=user.id,
                    service_used="pollinations.ai",
                    image_url=result.image_url,
                    local_path=result.local_path,
                    prompt_used="test generation",
                    generation_time_seconds=result.generation_time_seconds
                )
                
                db.add(generated_image)
                await db.commit()
                print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                
            else:
                print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {result.error_message}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")

if __name__ == "__main__":
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    asyncio.run(test_image_generation())