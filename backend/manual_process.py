#!/usr/bin/env python3
"""
–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥–∏
"""

import sys
import os
import asyncio
from uuid import UUID

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.database import AsyncSessionLocal
from app.models.book import Book
from app.core.tasks import process_book_task
from sqlalchemy import select

async def main():
    print("=" * 60)
    print("–†–£–ß–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–ò–ì")
    print("=" * 60)
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏
        result = await db.execute(select(Book))
        books = result.scalars().all()
        
        if not books:
            print("‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}")
        print("-" * 60)
        
        for i, book in enumerate(books, 1):
            print(f"{i}. {book.title} by {book.author}")
            print(f"   ID: {book.id}")
            print(f"   –ì–ª–∞–≤: {len(book.chapters)}")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {'‚úÖ' if book.is_parsed else '‚ùå'}")
            
            if not book.is_parsed:
                print(f"   üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º Celery –∑–∞–¥–∞—á—É
                    task = process_book_task.delay(str(book.id))
                    print(f"   ‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: {task.id}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ - –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –±–µ–∑ Celery
                    print(f"   üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                    from app.core.tasks import _process_book_async
                    result = await _process_book_async(book.id)
                    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['descriptions_found']} –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ")
    
    print("\n" + "=" * 60)
    print("–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())