#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º BookReader AI.
"""

import sys
import os
import asyncio

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.database import AsyncSessionLocal
from app.models.description import Description
from app.models.image import GeneratedImage
from app.models.book import Book
from app.models.chapter import Chapter
from app.models.user import User
from sqlalchemy import select

async def final_system_test():
    """–ü—Ä–æ–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º."""
    
    print("üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    async with AsyncSessionLocal() as db:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_result = await db.execute(select(User))
        users_count = len(users_result.scalars().all())
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–∏–≥–∏
        books_result = await db.execute(select(Book))
        books = books_result.scalars().all()
        books_count = len(books)
        print(f"üìö –ö–Ω–∏–≥–∏: {books_count}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤—ã
        chapters_result = await db.execute(select(Chapter))
        chapters_count = len(chapters_result.scalars().all())
        print(f"üìÑ –ì–ª–∞–≤—ã: {chapters_count}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
        descriptions_result = await db.execute(select(Description))
        descriptions = descriptions_result.scalars().all()
        descriptions_count = len(descriptions)
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏—è: {descriptions_count}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images_result = await db.execute(select(GeneratedImage))
        images = images_result.scalars().all()
        images_count = len(images)
        print(f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {images_count}")
        
        # 6. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—è–º
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–ò–°–ê–ù–ò–ô:")
        print("-" * 30)
        type_stats = {}
        for desc in descriptions:
            desc_type = desc.type.value
            if desc_type not in type_stats:
                type_stats[desc_type] = {'total': 0, 'with_images': 0}
            type_stats[desc_type]['total'] += 1
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        for img in images:
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for desc in descriptions:
                if desc.id == img.description_id:
                    desc_type = desc.type.value
                    type_stats[desc_type]['with_images'] += 1
                    break
        
        for desc_type, stats in type_stats.items():
            print(f"  {desc_type.upper():12}: {stats['total']:2} –æ–ø–∏—Å–∞–Ω–∏–π, {stats['with_images']:2} —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        
        # 7. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–∞—Ö —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        print(f"\nüìñ –ö–ù–ò–ì–ò –° –û–ü–ò–°–ê–ù–ò–Ø–ú–ò:")
        print("-" * 30)
        books_with_descriptions = {}
        for desc in descriptions:
            chapter_result = await db.execute(
                select(Chapter).where(Chapter.id == desc.chapter_id)
            )
            chapter = chapter_result.scalar_one_or_none()
            if chapter:
                book_result = await db.execute(
                    select(Book).where(Book.id == chapter.book_id)
                )
                book = book_result.scalar_one_or_none()
                if book:
                    book_title = book.title[:30] + "..." if len(book.title) > 30 else book.title
                    if book_title not in books_with_descriptions:
                        books_with_descriptions[book_title] = {'descriptions': 0, 'images': 0}
                    books_with_descriptions[book_title]['descriptions'] += 1
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏
                    for img in images:
                        if img.description_id == desc.id:
                            books_with_descriptions[book_title]['images'] += 1
        
        for book_title, stats in books_with_descriptions.items():
            print(f"  {book_title}")
            print(f"    –û–ø–∏—Å–∞–Ω–∏–π: {stats['descriptions']}, –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['images']}")
        
        # 8. –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        print(f"\nüñºÔ∏è  –ü–†–ò–ú–ï–†–´ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
        print("-" * 50)
        for i, img in enumerate(images[:3], 1):
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            desc_result = await db.execute(
                select(Description).where(Description.id == img.description_id)
            )
            desc = desc_result.scalar_one_or_none()
            if desc:
                print(f"{i}. –¢–∏–ø: {desc.type.value}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {desc.content[:60]}...")
                print(f"   URL: {img.image_url[:80]}...")
                print(f"   –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {img.generation_time_seconds:.1f}—Å")
                print()
        
        # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        print("‚úÖ –ì–û–¢–û–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´:")
        print("-" * 30)
        print(f"  {'‚úÖ' if users_count > 0 else '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
        print(f"  {'‚úÖ' if books_count > 0 else '‚ùå'} –ö–Ω–∏–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print(f"  {'‚úÖ' if chapters_count > 0 else '‚ùå'} –ì–ª–∞–≤—ã –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω—ã")
        print(f"  {'‚úÖ' if descriptions_count > 0 else '‚ùå'} –û–ø–∏—Å–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω—ã")
        print(f"  {'‚úÖ' if images_count > 0 else '‚ùå'} –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        coverage_percent = (images_count / descriptions_count * 100) if descriptions_count > 0 else 0
        print(f"  üìà –ü–æ–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {coverage_percent:.1f}%")
        
        if all([users_count > 0, books_count > 0, chapters_count > 0, descriptions_count > 0, images_count > 0]):
            print("\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
            print("   –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3000 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            print("\n‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

if __name__ == "__main__":
    asyncio.run(final_system_test())