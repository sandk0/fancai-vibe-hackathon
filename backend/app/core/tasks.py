"""
Background tasks for BookReader AI.
–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è BookReader AI.
"""

from app.core.celery_app import celery_app
import asyncio
from typing import Dict, Any, List
import logging
from datetime import datetime, timezone
from uuid import UUID
from sqlalchemy import select

from app.core.database import AsyncSessionLocal
from app.models.book import Book
from app.models.chapter import Chapter
from app.models.description import Description, DescriptionType

# Lazy import to avoid loading spaCy model at startup
# from app.services.nlp_processor import nlp_processor
from app.services.image_generator import image_generator_service

# Optional imports for optimization (graceful fallback)
try:
    import psutil  # noqa: F401
    import gc  # noqa: F401

    HAS_PSUTIL = True
except ImportError:
    HAS_PSUTIL = False

try:
    from app.services.optimized_parser import optimized_parser  # noqa: F401

    USE_OPTIMIZED_PARSER = True
except ImportError:
    USE_OPTIMIZED_PARSER = False

logger = logging.getLogger(__name__)


def _run_async_task(coro):
    """
    Helper function to run async functions in Celery tasks.

    –í–ê–ñ–ù–û: –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º event loop –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫:
    1. –ü–æ—Å–ª–µ run_until_complete() loop —É–∂–µ –Ω–µ running
    2. –ó–∞–∫—Ä—ã—Ç–∏–µ loop –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ async –æ–ø–µ—Ä–∞—Ü–∏–∏
    3. –ü–æ–∑–≤–æ–ª—è–µ–º asyncio —É–ø—Ä–∞–≤–ª—è—Ç—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º loop
    """
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        # Worker thread –Ω–µ –∏–º–µ–µ—Ç event loop - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    try:
        return loop.run_until_complete(coro)
    finally:
        # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º loop - –ø–æ–∑–≤–æ–ª—è–µ–º asyncio —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º
        pass


@celery_app.task(name="process_book", bind=True, max_retries=3, default_retry_delay=60)
def process_book_task(self, book_id_str: str) -> Dict[str, Any]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏: –ø–∞—Ä—Å–∏–Ω–≥ –≥–ª–∞–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π.

    Args:
        book_id_str: String ID –∫–Ω–∏–≥–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (UUID)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
    """
    try:
        print(f"üöÄ [CELERY TASK] Starting book processing for book_id={book_id_str}")
        book_id = UUID(book_id_str)
        logger.info(f"Starting book processing for book_id={book_id}")

        result = _run_async_task(_process_book_async(book_id))

        print(
            f"‚úÖ [CELERY TASK] Book processing completed for book_id={book_id}, result: {result}"
        )
        logger.info(f"Book processing completed for book_id={book_id}")
        return result

    except Exception as e:
        error_msg = f"Error processing book {book_id_str}: {str(e)}"
        print(f"‚ùå [CELERY TASK] {error_msg}")
        logger.error(error_msg)
        import traceback

        print(f"üîç [CELERY TASK] Full traceback: {traceback.format_exc()}")
        return {"book_id": book_id_str, "status": "failed", "error": str(e)}


async def _process_book_async(book_id: UUID) -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥–∏."""
    async with AsyncSessionLocal() as db:
        print(f"üîç [ASYNC TASK] Starting async processing for book {book_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥—É
        book_result = await db.execute(select(Book).where(Book.id == book_id))
        book = book_result.scalar_one_or_none()

        if not book:
            error_msg = f"Book with id {book_id} not found"
            print(f"‚ùå [ASYNC TASK] {error_msg}")
            raise ValueError(error_msg)

        print(f"üìö [ASYNC TASK] Found book: {book.title} by {book.author}")

        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        chapters_result = await db.execute(
            select(Chapter)
            .where(Chapter.book_id == book_id)
            .order_by(Chapter.chapter_number)
        )
        chapters = chapters_result.scalars().all()

        print(f"üìñ [ASYNC TASK] Found {len(chapters)} chapters to process")

        total_descriptions = 0
        processed_chapters = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥–ª–∞–≤—É
        for chapter in chapters:
            try:
                print(
                    f"üîÑ [ASYNC TASK] Processing chapter {chapter.chapter_number}: {chapter.title}"
                )
                logger.info(
                    f"Processing chapter {chapter.chapter_number} of book {book_id}"
                )

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≥–ª–∞–≤—ã (—Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π)
                from app.services.multi_nlp_manager import multi_nlp_manager

                print(
                    f"üìù [ASYNC TASK] Chapter content length: {len(chapter.content)} chars"
                )

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (
                    not hasattr(multi_nlp_manager, "_initialized")
                    or not multi_nlp_manager._initialized
                ):
                    print("üß† [ASYNC TASK] Initializing multi NLP manager...")
                    await multi_nlp_manager.initialize()

                print(
                    f"üß† [ASYNC TASK] Multi-NLP manager initialized: {multi_nlp_manager._initialized}"
                )

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
                result = await multi_nlp_manager.extract_descriptions(
                    text=chapter.content,
                    chapter_id=str(chapter.id),
                    processor_name=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                )
                descriptions = result.descriptions

                print(f"üîç [ASYNC TASK] NLP extracted {len(descriptions)} descriptions")
                if descriptions:
                    print(f"üîç [ASYNC TASK] First description sample: {descriptions[0]}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                for i, desc_data in enumerate(descriptions):
                    print(
                        f"üíæ [ASYNC TASK] Saving description {i+1}/{len(descriptions)}: type={desc_data['type']}"
                    )

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ –≤ enum
                    try:
                        desc_type = DescriptionType(desc_data["type"])
                    except ValueError:
                        print(
                            f"‚ö†Ô∏è [ASYNC TASK] Invalid description type '{desc_data['type']}', skipping"
                        )
                        continue

                    description = Description(
                        chapter_id=chapter.id,
                        type=desc_type,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º enum –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
                        content=desc_data["content"],
                        context=desc_data.get("context", ""),
                        confidence_score=desc_data["confidence_score"],
                        position_in_chapter=desc_data.get("position_in_chapter", 0),
                        word_count=desc_data.get(
                            "word_count", len(desc_data["content"].split())
                        ),
                        priority_score=desc_data["priority_score"],
                        entities_mentioned=", ".join(desc_data["entities_mentioned"])
                        if desc_data.get("entities_mentioned")
                        else "",
                    )
                    db.add(description)
                    print(
                        f"‚úÖ [ASYNC TASK] Added description to session: {description.content[:50]}..."
                    )

                print(
                    f"üíæ [ASYNC TASK] Committing {len(descriptions)} descriptions to database..."
                )
                await db.commit()
                print("‚úÖ [ASYNC TASK] Successfully committed descriptions")

                total_descriptions += len(descriptions)
                processed_chapters += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–ª–∞–≤—ã
                chapter.is_description_parsed = True
                chapter.descriptions_found = len(descriptions)
                chapter.parsing_progress = 100.0

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–∏–≥–∏
                book.parsing_progress = int((processed_chapters / len(chapters)) * 100)
                await db.commit()

                print(
                    f"‚úÖ [ASYNC TASK] Chapter {chapter.chapter_number} completed: {len(descriptions)} descriptions"
                )
                logger.info(
                    f"Found {len(descriptions)} descriptions in chapter {chapter.chapter_number}"
                )

            except Exception as e:
                error_msg = (
                    f"Error processing chapter {chapter.chapter_number}: {str(e)}"
                )
                print(f"‚ùå [ASYNC TASK] {error_msg}")
                logger.error(error_msg)
                import traceback

                print(
                    f"üîç [ASYNC TASK] Chapter error traceback: {traceback.format_exc()}"
                )
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –≥–ª–∞–≤
                continue

        # –ü–æ–º–µ—á–∞–µ–º –∫–Ω–∏–≥—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
        print(
            f"üèÅ [ASYNC TASK] Marking book as parsed: {total_descriptions} total descriptions"
        )
        book.is_parsed = True
        book.parsing_progress = 100
        await db.commit()

        result = {
            "book_id": str(book_id),
            "status": "completed",
            "descriptions_found": total_descriptions,
            "chapters_processed": processed_chapters,
            "total_chapters": len(chapters),
        }

        print(f"üéâ [ASYNC TASK] Final result: {result}")
        return result


@celery_app.task(name="generate_images")
def generate_images_task(
    description_ids: List[str], user_id_str: str
) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π.

    Args:
        description_ids: –°–ø–∏—Å–æ–∫ string ID –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        user_id_str: String ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    try:
        logger.info(
            f"Starting image generation for {len(description_ids)} descriptions"
        )

        result = _run_async_task(_generate_images_async(description_ids, user_id_str))

        logger.info(
            f"Image generation completed for {len(description_ids)} descriptions"
        )
        return result

    except Exception as e:
        logger.error(f"Error generating images: {str(e)}")
        return {"description_ids": description_ids, "status": "failed", "error": str(e)}


async def _generate_images_async(
    description_ids: List[str], user_id_str: str
) -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    async with AsyncSessionLocal() as db:
        user_id = UUID(user_id_str)
        images_generated = 0
        failed_generations = 0
        generated_images = []

        for desc_id_str in description_ids:
            try:
                desc_id = UUID(desc_id_str)

                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                desc_result = await db.execute(
                    select(Description).where(Description.id == desc_id)
                )
                description = desc_result.scalar_one_or_none()

                if not description:
                    logger.warning(f"Description {desc_id} not found")
                    failed_generations += 1
                    continue

                logger.info(
                    f"Generating image for description {desc_id}: {description.type.value}"
                )

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                generation_result = (
                    await image_generator_service.generate_image_for_description(
                        description=description,
                        user_id=str(user_id),
                        custom_style=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    )
                )

                if generation_result.success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    from app.models.image import GeneratedImage

                    generated_image = GeneratedImage(
                        description_id=description.id,
                        user_id=user_id,
                        image_url=generation_result.image_url,
                        local_path=generation_result.local_path,
                        generation_prompt="auto-generated",
                        generation_time_seconds=generation_result.generation_time_seconds,
                    )

                    db.add(generated_image)
                    await db.commit()
                    await db.refresh(generated_image)

                    generated_images.append(
                        {
                            "id": str(generated_image.id),
                            "description_id": str(description.id),
                            "image_url": generation_result.image_url,
                            "generation_time": generation_result.generation_time_seconds,
                        }
                    )

                    images_generated += 1
                    logger.info(
                        f"Successfully generated image for description {desc_id}"
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                    description.image_generated = True
                    await db.commit()

                else:
                    failed_generations += 1
                    logger.error(
                        f"Failed to generate image for description {desc_id}: {generation_result.error_message}"
                    )

            except Exception as e:
                failed_generations += 1
                logger.error(f"Error processing description {desc_id_str}: {str(e)}")
                continue

        return {
            "description_ids": description_ids,
            "user_id": user_id_str,
            "status": "completed",
            "images_generated": images_generated,
            "failed_generations": failed_generations,
            "generated_images": generated_images,
            "total_processed": len(description_ids),
        }


@celery_app.task(name="batch_generate_for_book")
def batch_generate_for_book_task(
    book_id_str: str, user_id_str: str, max_images: int = 10
) -> Dict[str, Any]:
    """
    –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –∫–Ω–∏–≥–∏.

    Args:
        book_id_str: String ID –∫–Ω–∏–≥–∏
        user_id_str: String ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        max_images: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    try:
        logger.info(
            f"Starting batch generation for book {book_id_str}, max_images={max_images}"
        )

        result = _run_async_task(
            _batch_generate_for_book_async(book_id_str, user_id_str, max_images)
        )

        logger.info(f"Batch generation completed for book {book_id_str}")
        return result

    except Exception as e:
        logger.error(f"Error in batch generation for book {book_id_str}: {str(e)}")
        return {"book_id": book_id_str, "status": "failed", "error": str(e)}


async def _batch_generate_for_book_async(
    book_id_str: str, user_id_str: str, max_images: int
) -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–Ω–∏–≥–∏."""
    async with AsyncSessionLocal() as db:
        book_id = UUID(book_id_str)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        descriptions_query = (
            select(Description)
            .join(Chapter)
            .where(Chapter.book_id == book_id)
            .where(Description.is_suitable_for_generation is True)
            .where(Description.image_generated is False)
            .order_by(Description.priority_score.desc())
            .limit(max_images)
        )

        descriptions_result = await db.execute(descriptions_query)
        descriptions = descriptions_result.scalars().all()

        if not descriptions:
            return {
                "book_id": book_id_str,
                "status": "completed",
                "message": "No suitable descriptions found for generation",
                "images_generated": 0,
            }

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
        description_ids = [str(d.id) for d in descriptions]

        return await _generate_images_async(description_ids, user_id_str)


@celery_app.task(name="cleanup_old_images")
def cleanup_old_images_task(days_old: int = 30) -> Dict[str, Any]:
    """
    –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    Args:
        days_old: –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    try:
        logger.info(f"Starting cleanup of images older than {days_old} days")

        result = _run_async_task(_cleanup_old_images_async(days_old))

        logger.info("Image cleanup completed")
        return result

    except Exception as e:
        logger.error(f"Error in image cleanup: {str(e)}")
        return {"status": "failed", "error": str(e)}


async def _cleanup_old_images_async(days_old: int) -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    from datetime import datetime, timedelta, timezone
    import os
    from app.models.image import GeneratedImage

    async with AsyncSessionLocal() as db:
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cutoff_date = datetime.now(timezone.utc) - timedelta(days=days_old)

        old_images_result = await db.execute(
            select(GeneratedImage).where(GeneratedImage.created_at < cutoff_date)
        )
        old_images = old_images_result.scalars().all()

        deleted_files = 0
        deleted_records = 0

        for image in old_images:
            try:
                # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if image.local_path and os.path.exists(image.local_path):
                    os.unlink(image.local_path)
                    deleted_files += 1

                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
                await db.delete(image)
                deleted_records += 1

            except Exception as e:
                logger.error(f"Error deleting image {image.id}: {str(e)}")
                continue

        await db.commit()

        return {
            "status": "completed",
            "deleted_files": deleted_files,
            "deleted_records": deleted_records,
            "cutoff_date": cutoff_date.isoformat(),
        }


@celery_app.task(name="health_check")
def health_check_task() -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Celery worker."""
    return "Celery is working!"


@celery_app.task(name="system_stats")
def system_stats_task() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    try:
        result = _run_async_task(_get_system_stats_async())
        return result

    except Exception as e:
        logger.error(f"Error getting system stats: {str(e)}")
        return {"status": "failed", "error": str(e)}


async def _get_system_stats_async() -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    from sqlalchemy import func
    from app.models.image import GeneratedImage

    async with AsyncSessionLocal() as db:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥
        books_count = await db.execute(select(func.count(Book.id)))
        total_books = books_count.scalar()

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏–π
        descriptions_count = await db.execute(select(func.count(Description.id)))
        total_descriptions = descriptions_count.scalar()

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_count = await db.execute(select(func.count(GeneratedImage.id)))
        total_images = images_count.scalar()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
        processed_books_count = await db.execute(
            select(func.count(Book.id)).where(Book.is_parsed is True)
        )
        processed_books = processed_books_count.scalar()

        return {
            "status": "operational",
            "total_books": total_books,
            "processed_books": processed_books,
            "total_descriptions": total_descriptions,
            "total_images": total_images,
            "processing_rate": round((processed_books / total_books * 100), 2)
            if total_books > 0
            else 0.0,
            "generation_rate": round((total_images / total_descriptions * 100), 2)
            if total_descriptions > 0
            else 0.0,
            "timestamp": datetime.now(timezone.utc).isoformat(),
        }
