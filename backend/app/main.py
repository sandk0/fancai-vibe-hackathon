"""
BookReader AI - FastAPI Main Application

–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥
—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—è–º.
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
from datetime import datetime, timezone
from typing import Dict, Any

from .routers import users, nlp, books, auth, images, chapters, reading_progress, descriptions
from .routers.admin import admin_router
from .core.config import settings
from .services.settings_manager import settings_manager
from .services.multi_nlp_manager import multi_nlp_manager

# –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
VERSION = "0.1.0"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="BookReader AI API",
    description="API –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥ —Å –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    version=VERSION,
    docs_url="/docs",
    redoc_url="/redoc",
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins_list,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/api/v1", tags=["auth"])
app.include_router(users.router, prefix="/api/v1", tags=["users"])
app.include_router(nlp.router, prefix="/api/v1", tags=["nlp"])
app.include_router(images.router, prefix="/api/v1", tags=["images"])
app.include_router(admin_router, prefix="/api/v1")

# Books routers (refactored into focused modules)
app.include_router(books.router, prefix="/api/v1/books", tags=["books"])
app.include_router(chapters.router, prefix="/api/v1/books", tags=["chapters"])
app.include_router(reading_progress.router, prefix="/api/v1/books", tags=["reading_progress"])
app.include_router(descriptions.router, prefix="/api/v1/books", tags=["descriptions"])


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    print("üöÄ Starting BookReader AI...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        await settings_manager.initialize_default_settings()
        print("‚úÖ Default settings initialized")
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to initialize settings: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Multi-NLP Manager
    try:
        await multi_nlp_manager.initialize()
        print("‚úÖ Multi-NLP Manager initialized")
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to initialize Multi-NLP Manager: {e}")


@app.get("/")
async def root() -> Dict[str, Any]:
    """
    –ë–∞–∑–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API.

    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–∏—Å–µ
    """
    return {
        "message": "BookReader AI API",
        "version": VERSION,
        "status": "running",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "docs": "/docs",
    }


@app.get("/health")
async def health_check() -> Dict[str, Any]:
    """
    Health check endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

    Returns:
        Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
    """
    return {
        "status": "healthy",
        "version": VERSION,
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "checks": {
            "api": "ok",
            "database": "checking...",  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î
            "redis": "checking...",  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É Redis
        },
    }


@app.get("/api/v1/info")
async def api_info() -> Dict[str, Any]:
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints.

    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API
    """
    return {
        "api_version": "v1",
        "app_version": VERSION,
        "features": [
            "book_upload",
            "epub_parsing",
            "fb2_parsing",
            "nlp_description_extraction",
            "ai_image_generation",
            "user_authentication",
            "subscription_management",
        ],
        "endpoints": {
            "health": "/health",
            "docs": "/docs",
            "books": "/api/v1/books",
            "users": "/api/v1/users",
            "auth": "/api/v1/auth",
            "images": "/api/v1/images",
        },
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(404)
async def not_found_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫."""
    return JSONResponse(
        status_code=404,
        content={
            "error": "Not Found",
            "message": "Requested resource not found",
            "path": str(request.url.path),
            "timestamp": datetime.now(timezone.utc).isoformat(),
        },
    )


@app.exception_handler(500)
async def internal_error_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
    import traceback

    error_traceback = traceback.format_exc()
    print(f"[ERROR HANDLER] 500 error: {exc}")
    print(f"[ERROR HANDLER] Traceback: {error_traceback}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": f"An internal server error occurred: {str(exc)}",
            "timestamp": datetime.now(timezone.utc).isoformat(),
        },
    )


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True, log_level="info")
