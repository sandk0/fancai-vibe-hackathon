version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bookreader-db-prod
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-bookreader}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - bookreader-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: bookreader-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - bookreader-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: bookreader-backend-prod
    environment:
      # Database
      DATABASE_URL: postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-bookreader}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: ${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      POLLINATIONS_ENABLED: ${POLLINATIONS_ENABLED:-true}
      
      # App Settings
      ENVIRONMENT: production
      DEBUG: "false"
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://yourdomain.com}
      
      # File Storage
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-52428800}
      STATIC_FILES_URL: ${STATIC_FILES_URL:-/static}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Performance
      WORKERS_COUNT: ${WORKERS_COUNT:-4}
      MAX_CONNECTIONS_COUNT: ${MAX_CONNECTIONS_COUNT:-10}
      MIN_CONNECTIONS_COUNT: ${MIN_CONNECTIONS_COUNT:-5}
      
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - bookreader-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: bookreader-worker-prod
    command: celery -A app.core.celery worker --loglevel=${LOG_LEVEL:-info} --concurrency=${CELERY_WORKERS:-4}
    environment:
      # Database
      DATABASE_URL: postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-bookreader}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      POLLINATIONS_ENABLED: ${POLLINATIONS_ENABLED:-true}
      
      # App Settings
      ENVIRONMENT: production
      SECRET_KEY: ${SECRET_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - bookreader-network
    depends_on:
      - backend
      - redis
    restart: unless-stopped
    deploy:
      replicas: ${CELERY_REPLICAS:-2}

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: bookreader-beat-prod
    command: celery -A app.core.celery beat --loglevel=${LOG_LEVEL:-info}
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-bookreader}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      ENVIRONMENT: production
      SECRET_KEY: ${SECRET_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
    networks:
      - bookreader-network
    depends_on:
      - redis
    restart: unless-stopped

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-/api}
        REACT_APP_WS_URL: ${REACT_APP_WS_URL:-/ws}
        REACT_APP_ENVIRONMENT: production
    container_name: bookreader-frontend-prod
    networks:
      - bookreader-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: bookreader-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./uploads:/usr/share/nginx/uploads:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - bookreader-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: bookreader-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - bookreader-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: bookreader-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    networks:
      - bookreader-network
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  bookreader-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16