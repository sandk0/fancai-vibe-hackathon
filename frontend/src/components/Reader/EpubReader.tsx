import { useState, useEffect, useCallback, useRef } from 'react';
import ePub from 'epubjs';
import type { Book, Rendition } from 'epubjs';
import { booksAPI } from '@/api/books';
import { imagesAPI } from '@/api/images';
import { STORAGE_KEYS } from '@/types/state';
import type { BookDetail, Description, GeneratedImage } from '@/types/api';
import { ImageModal } from '@/components/Images/ImageModal';

interface EpubReaderProps {
  book: BookDetail;
}

export const EpubReader: React.FC<EpubReaderProps> = ({ book }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string>('');
  const [isReady, setIsReady] = useState(false);
  const [renditionReady, setRenditionReady] = useState(false);
  const [descriptions, setDescriptions] = useState<Description[]>([]);
  const [images, setImages] = useState<GeneratedImage[]>([]);
  const [selectedImage, setSelectedImage] = useState<GeneratedImage | null>(null);
  const [currentChapter, setCurrentChapter] = useState<number>(1);
  const viewerRef = useRef<HTMLDivElement>(null);
  const renditionRef = useRef<Rendition | null>(null);
  const bookRef = useRef<Book | null>(null);
  const saveTimeoutRef = useRef<NodeJS.Timeout>();
  const restoredCfi = useRef<string | null>(null); // CFI –∫–æ—Ç–æ—Ä—ã–π –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤—ã –∏–∑ location
  const getChapterFromLocation = useCallback((location: any): number => {
    try {
      if (!bookRef.current) return 1;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π href spine —ç–ª–µ–º–µ–Ω—Ç–∞
      const currentHref = location?.start?.href;
      if (!currentHref) {
        console.warn('‚ö†Ô∏è No href in location');
        return 1;
      }

      // –ü–æ–ª—É—á–∞–µ–º spine –∏–∑ –∫–Ω–∏–≥–∏
      const spine = (bookRef.current as any).spine;
      if (!spine || !spine.items) {
        console.warn('‚ö†Ô∏è No spine items');
        return 1;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ spine —ç–ª–µ–º–µ–Ω—Ç–∞
      const spineIndex = spine.items.findIndex((item: any) => {
        return item.href === currentHref || item.href.includes(currentHref);
      });

      if (spineIndex === -1) {
        console.warn('‚ö†Ô∏è Spine item not found for href:', currentHref);
        return 1;
      }

      // –í–ê–ñ–ù–û: chapter_number –≤ –ë–î = –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ spine (–Ω–∞—á–∏–Ω–∞—è —Å 1)
      // –ü–∞—Ä—Å–µ—Ä EPUB –Ω—É–º–µ—Ä—É–µ—Ç –≥–ª–∞–≤—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ spine (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ –∏ —Ç.–¥.)
      const chapter = spineIndex + 1;
      console.log(`üìñ Chapter detected: ${chapter} (spine index: ${spineIndex}, href: ${currentHref})`);
      return Math.max(1, chapter);

    } catch (error) {
      console.error('‚ùå Error extracting chapter from location:', error);
      return 1;
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è epub.js –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏
  useEffect(() => {
    if (!isReady) {
      console.log('‚è≥ Component not ready yet');
      return;
    }

    const initEpub = async () => {
      if (!viewerRef.current) {
        console.error('‚ùå Viewer ref is null');
        setError('Viewer container not found');
        return;
      }

      try {
        console.log('üì• Downloading EPUB file...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ fetch (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)
        const token = localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);
        const response = await fetch(booksAPI.getBookFileUrl(book.id), {
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        });

        if (!response.ok) {
          throw new Error(`Failed to download EPUB: ${response.statusText}`);
        }

        const arrayBuffer = await response.arrayBuffer();
        console.log('‚úÖ EPUB file downloaded successfully', {
          size: arrayBuffer.byteLength
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º epub.js –Ω–∞–ø—Ä—è–º—É—é —Å ArrayBuffer
        const epubBook = ePub(arrayBuffer);
        bookRef.current = epubBook;

        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏
        console.log('‚è≥ Waiting for book to load...');
        await epubBook.ready;
        console.log('‚úÖ Book ready');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º locations –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏)
        console.log('üìä Generating locations for progress tracking...');
        await epubBook.locations.generate(1600); // 1600 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ "—Å—Ç—Ä–∞–Ω–∏—Ü—É"
        const locationsTotal = (epubBook.locations as any).total || 0;
        console.log('‚úÖ Locations generated:', locationsTotal);

        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ locations –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤—ã
        console.log('üîç Locations ready check:', {
          total: locationsTotal,
          length: epubBook.locations.length(),
          hasPercentageFromCfi: typeof epubBook.locations.percentageFromCfi === 'function',
          hasCfiFromPercentage: typeof epubBook.locations.cfiFromPercentage === 'function'
        });

        if (locationsTotal <= 0) {
          console.warn('‚ö†Ô∏è Locations not generated, falling back to manual calculation');
        }

        // –°–æ–∑–¥–∞–µ–º rendition
        const rendition = epubBook.renderTo(viewerRef.current, {
          width: '100%',
          height: '100%',
          spread: 'none',
        });
        renditionRef.current = rendition;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
        rendition.themes.default({
          body: {
            color: '#e5e7eb !important',
            background: '#1f2937 !important',
            'font-family': 'Georgia, serif !important',
            'font-size': '1.1em !important',
            'line-height': '1.6 !important',
          },
          p: {
            'margin-bottom': '1em !important',
          },
          a: {
            color: '#60a5fa !important',
          },
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –î–û display —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ)
        rendition.on('relocated', async (location: any) => {
          const cfi = location.start.cfi;

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≥–ª–∞–≤—É –∏–∑ location –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
          // React –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
          const chapter = getChapterFromLocation(location);
          setCurrentChapter(chapter);

          // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ relocated —Å–æ–±—ã—Ç–∏–µ
          console.log('üîÑ relocated event fired:', {
            cfi: cfi.substring(0, 80) + '...',
            fullCfi: cfi,
            chapter,
            restoredCfi: restoredCfi.current?.substring(0, 80) + '...',
            isExactMatch: cfi === restoredCfi.current,
            hasRestoredCfi: !!restoredCfi.current
          });

          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ relocated —Å–æ–±—ã—Ç–∏—è —Å CFI, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏
          // (epub.js –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ relocated –ø—Ä–∏ display())
          if (restoredCfi.current && cfi === restoredCfi.current) {
            console.log('‚è≥ Skipping relocated event - EXACT match with restored position');
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å CFI –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
          if (restoredCfi.current) {
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –µ—Å–ª–∏ CFI –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
            let restoredPercent = 0;
            let currentPercent = 0;

            const locTotal = (epubBook.locations as any).total || 0;
            if (epubBook.locations && locTotal > 0) {
              restoredPercent = Math.round((epubBook.locations.percentageFromCfi(restoredCfi.current) || 0) * 100);
              currentPercent = Math.round((epubBook.locations.percentageFromCfi(cfi) || 0) * 100);

              console.log('üîç Comparing positions:', {
                restoredPercent: restoredPercent + '%',
                currentPercent: currentPercent + '%',
                diff: Math.abs(currentPercent - restoredPercent) + '%',
                withinThreshold: Math.abs(currentPercent - restoredPercent) <= 3
              });

              // –ï—Å–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 3% - —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ epub.js, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
              // (epub.js –º–æ–∂–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å CFI –∫ –Ω–∞—á–∞–ª—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞/—É–∑–ª–∞)
              if (Math.abs(currentPercent - restoredPercent) <= 3) {
                console.log('‚è≥ Skipping relocated event - within 3% of restored position (epub.js rounding)');
                restoredCfi.current = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç.–∫. —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ restore
                return;
              }
            }

            console.log('‚úÖ First real page turn detected, auto-save now enabled');
            restoredCfi.current = null;
          }

          // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          let progressPercent = 0;

          const locationsTotal = (epubBook.locations as any)?.total || 0;
          if (epubBook.locations && locationsTotal > 0) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º locations –µ—Å–ª–∏ –æ–Ω–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
            const currentLocation = epubBook.locations.percentageFromCfi(cfi);
            progressPercent = Math.round((currentLocation || 0) * 100);

            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            console.log('üìä Progress calculation (via locations):', {
              rawPercentage: currentLocation,
              roundedPercent: progressPercent + '%',
              locationsTotal,
              cfiLength: cfi.length
            });
          } else {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ currentLocation()
            const current = rendition.currentLocation() as any;
            if (current && current.start && current.start.percentage !== undefined) {
              progressPercent = Math.round(current.start.percentage * 100);

              console.log('üìä Progress calculation (via currentLocation):', {
                rawPercentage: current.start.percentage,
                roundedPercent: progressPercent + '%'
              });
            }
          }

          console.log('üìç Location changed:', {
            cfi: cfi.substring(0, 50) + '...',
            progress: progressPercent + '%',
            locationsTotal
          });

          // Debounced —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
          if (saveTimeoutRef.current) {
            clearTimeout(saveTimeoutRef.current);
          }

          saveTimeoutRef.current = setTimeout(async () => {
            try {
              // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫—Ä–æ–ª–ª–∞ –≤–Ω—É—Ç—Ä–∏ iframe
              let scrollOffsetPercent = 0.0;
              const contents = rendition.getContents() as any;
              if (contents && contents.length > 0) {
                const iframe = contents[0];
                const doc = iframe.document;
                if (doc && doc.documentElement) {
                  const scrollTop = doc.documentElement.scrollTop || doc.body?.scrollTop || 0;
                  const scrollHeight = doc.documentElement.scrollHeight || doc.body?.scrollHeight || 0;
                  const clientHeight = doc.documentElement.clientHeight || doc.body?.clientHeight || 0;
                  const maxScroll = scrollHeight - clientHeight;

                  if (maxScroll > 0) {
                    scrollOffsetPercent = (scrollTop / maxScroll) * 100;
                  }

                  console.log('üìè Scroll metrics:', {
                    scrollTop,
                    scrollHeight,
                    clientHeight,
                    maxScroll,
                    scrollOffsetPercent: scrollOffsetPercent.toFixed(2) + '%'
                  });
                }
              }

              await booksAPI.updateReadingProgress(book.id, {
                current_chapter: 1,
                current_position_percent: progressPercent,
                reading_location_cfi: cfi,
                scroll_offset_percent: scrollOffsetPercent,
              });
              console.log('üíæ Reading progress saved:', {
                cfi: cfi.substring(0, 50),
                progress: progressPercent + '%',
                scrollOffset: scrollOffsetPercent.toFixed(2) + '%'
              });
            } catch (error) {
              console.error('‚ùå Error saving reading progress:', error);
            }
          }, 2000);
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
        const { progress } = await booksAPI.getReadingProgress(book.id);

        if (progress?.reading_location_cfi) {
          const savedCfi = progress.reading_location_cfi;
          const savedPercent = progress.current_position || 0;

          // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
          console.log('üìñ Attempting to restore position:', {
            savedCfi: savedCfi.substring(0, 80) + '...',
            savedPercent: savedPercent + '%',
            fullCfi: savedCfi
          });

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ percentageFromCfi —Ä–∞–±–æ—Ç–∞–µ—Ç –î–û display
          const locTotal = (epubBook.locations as any)?.total || 0;
          if (epubBook.locations && locTotal > 0) {
            const testPercent = epubBook.locations.percentageFromCfi(savedCfi);
            console.log('üß™ Testing percentageFromCfi BEFORE display:', {
              result: testPercent,
              asPercent: Math.round((testPercent || 0) * 100) + '%',
              expectedPercent: savedPercent + '%',
              match: Math.round((testPercent || 0) * 100) === savedPercent
            });
          }

          // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –∞ –Ω–µ –ø—Ä—è–º–æ–π CFI
          // epub.js –º–æ–∂–µ—Ç –æ–∫—Ä—É–≥–ª—è—Ç—å CFI, –Ω–æ locations.cfiFromPercentage() –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–µ–Ω
          let cfiToRestore = savedCfi;

          if (epubBook.locations && locTotal > 0 && savedPercent > 0) {
            // –í—ã—á–∏—Å–ª—è–µ–º CFI –∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            const percentValue = savedPercent / 100;
            const cfiFromPercent = epubBook.locations.cfiFromPercentage(percentValue);

            console.log('üîÑ Trying cfiFromPercentage approach:', {
              savedPercent: savedPercent + '%',
              percentValue: percentValue,
              cfiFromPercent: cfiFromPercent?.substring(0, 80) + '...',
              savedCfi: savedCfi.substring(0, 80) + '...'
            });

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º CFI –∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–µ–Ω
            if (cfiFromPercent && cfiFromPercent !== 'epubcfi()') {
              cfiToRestore = cfiFromPercent;
              console.log('‚úÖ Using cfiFromPercentage for more accurate restoration');
            }
          }

          restoredCfi.current = cfiToRestore; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º CFI

          // –í—ã–∑—ã–≤–∞–µ–º display
          await rendition.display(cfiToRestore);

          // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–¥–∞ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–ø–∞–ª–∏ –°–†–ê–ó–£ –ø–æ—Å–ª–µ display
          // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
          await new Promise(resolve => setTimeout(resolve, 300));

          const actualLocation = rendition.currentLocation() as any;
          const actualCfi = actualLocation?.start?.cfi;
          let actualPercent = 0;

          const locationsTotal2 = (epubBook.locations as any)?.total || 0;
          if (epubBook.locations && locationsTotal2 > 0 && actualCfi) {
            const percentValue = epubBook.locations.percentageFromCfi(actualCfi);
            actualPercent = Math.round((percentValue || 0) * 100);

            console.log('üß™ Testing percentageFromCfi AFTER display:', {
              result: percentValue,
              asPercent: actualPercent + '%'
            });
          }

          console.log('üéØ Actually restored to:', {
            actualCfi: actualCfi?.substring(0, 80) + '...',
            actualPercent: actualPercent + '%',
            fullActualCfi: actualCfi,
            cfiMatch: actualCfi === savedCfi,
            percentDiff: Math.abs(actualPercent - savedPercent) + '%'
          });

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–ª–∞–≤—É
          const currentLoc = rendition.currentLocation();
          if (currentLoc) {
            const initialChapter = getChapterFromLocation(currentLoc);
            console.log(`üìñ Initial chapter set to: ${initialChapter}`);
            setCurrentChapter(initialChapter);
          }

          if (actualCfi !== savedCfi) {
            console.warn('‚ö†Ô∏è CFI MISMATCH DETECTED!', {
              requested: savedCfi,
              actual: actualCfi,
              requestedPercent: savedPercent + '%',
              actualPercent: actualPercent + '%',
              percentDiff: Math.abs(actualPercent - savedPercent) + '%',
              cfiDiff: {
                requestedLength: savedCfi.length,
                actualLength: actualCfi?.length || 0,
                requestedEnd: savedCfi.substring(savedCfi.length - 20),
                actualEnd: actualCfi?.substring((actualCfi?.length || 0) - 20)
              }
            });
          } else {
            console.log('‚úÖ CFI restoration EXACT MATCH!');
          }

          // HYBRID APPROACH: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—á–Ω—ã–π scroll –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è CFI
          const savedScrollOffset = progress.scroll_offset_percent || 0;
          if (savedScrollOffset > 0) {
            console.log('üîß Applying fine-tuned scroll restoration:', {
              savedScrollOffset: savedScrollOffset.toFixed(2) + '%'
            });

            // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
            await new Promise(resolve => setTimeout(resolve, 200));

            const contents = rendition.getContents() as any;
            if (contents && contents.length > 0) {
              const iframe = contents[0];
              const doc = iframe.document;
              if (doc && doc.documentElement) {
                const scrollHeight = doc.documentElement.scrollHeight || doc.body?.scrollHeight || 0;
                const clientHeight = doc.documentElement.clientHeight || doc.body?.clientHeight || 0;
                const maxScroll = scrollHeight - clientHeight;

                if (maxScroll > 0) {
                  const targetScrollTop = (savedScrollOffset / 100) * maxScroll;
                  doc.documentElement.scrollTop = targetScrollTop;
                  if (doc.body) {
                    doc.body.scrollTop = targetScrollTop;
                  }

                  console.log('‚úÖ Fine-tuned scroll applied:', {
                    targetScrollTop,
                    maxScroll,
                    scrollHeight,
                    clientHeight,
                    requestedOffset: savedScrollOffset.toFixed(2) + '%'
                  });
                }
              }
            }
          }
        } else {
          console.log('üìñ Starting from beginning (no saved progress)');
          restoredCfi.current = null; // –ù–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
          await rendition.display();

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É
          console.log('üìñ Initial chapter set to: 1');
          setCurrentChapter(1);
        }

        console.log('‚úÖ EPUB reader initialized');
        setIsLoading(false);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ rendition –≥–æ—Ç–æ–≤ –¥–ª—è highlights
        // –° –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã DOM —Ç–æ—á–Ω–æ –±—ã–ª –≥–æ—Ç–æ–≤
        setTimeout(() => {
          console.log('‚úÖ Rendition ready for highlights');
          setRenditionReady(true);
        }, 500);
      } catch (err) {
        console.error('‚ùå Error initializing EPUB reader:', err);
        setError(err instanceof Error ? err.message : 'Error loading book');
        setIsLoading(false);
      }
    };

    initEpub();

    // Cleanup
    return () => {
      if (renditionRef.current) {
        renditionRef.current.destroy();
      }
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [book.id, isReady]);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isReady –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
  useEffect(() => {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ DOM –≥–æ—Ç–æ–≤
    const timer = setTimeout(() => {
      console.log('üéØ Setting ready state, viewerRef:', !!viewerRef.current);
      setIsReady(true);
    }, 100);

    return () => clearTimeout(timer);
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ã
  useEffect(() => {
    console.log('üîÑ useEffect triggered:', {
      bookId: book.id,
      currentChapter,
      condition: book.id && currentChapter > 0
    });

    const loadDescriptionsAndImages = async () => {
      try {
        console.log('üìö Loading descriptions and images for chapter:', currentChapter);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ã
        const descriptionsResponse = await booksAPI.getChapterDescriptions(
          book.id,
          currentChapter,
          false // –Ω–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å –Ω–æ–≤—ã–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
        );

        console.log('‚úÖ Descriptions loaded:', descriptionsResponse.nlp_analysis.total_descriptions);
        setDescriptions(descriptionsResponse.nlp_analysis.descriptions || []);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –≥–ª–∞–≤—ã
        const imagesResponse = await imagesAPI.getBookImages(book.id, currentChapter);
        console.log('‚úÖ Images loaded:', imagesResponse.images.length);
        setImages(imagesResponse.images);
      } catch (error: any) {
        console.error('‚ùå Error loading descriptions/images:', error);
        console.error('‚ùå Error details:', {
          message: error?.message,
          response: error?.response?.data,
          status: error?.response?.status,
          bookId: book.id,
          chapter: currentChapter
        });
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        setDescriptions([]);
        setImages([]);
      }
    };

    if (book.id && currentChapter > 0) {
      loadDescriptionsAndImages();
    }
  }, [book.id, currentChapter]); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ —Å–º–µ–Ω–µ –≥–ª–∞–≤—ã

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ EPUB
  const highlightDescriptionsInText = useCallback(() => {
    if (!renditionRef.current || descriptions.length === 0) {
      return;
    }

    console.log('üé® Highlighting descriptions in text:', descriptions.length);

    const rendition = renditionRef.current;
    const contents = rendition.getContents() as any;

    if (!contents || contents.length === 0) {
      console.warn('‚ö†Ô∏è No iframe content available for highlighting');
      return;
    }

    const iframe = contents[0];
    const doc = iframe.document;

    if (!doc || !doc.body) {
      console.warn('‚ö†Ô∏è No document body available');
      return;
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ highlights
    const oldHighlights = doc.querySelectorAll('.description-highlight');
    oldHighlights.forEach((el: Element) => {
      const parent = el.parentNode;
      if (parent) {
        // –ó–∞–º–µ–Ω—è–µ–º span —Å highlight –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        const textNode = doc.createTextNode(el.textContent || '');
        parent.replaceChild(textNode, el);
        parent.normalize(); // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ text nodes
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ highlights
    let highlightedCount = 0;
    descriptions.forEach((desc, descIndex) => {
      try {
        const text = desc.content;
        if (!text || text.length < 10) {
          console.log(`‚è≠Ô∏è Skipping description ${descIndex}: too short (${text?.length || 0} chars)`);
          return;
        }

        console.log(`üîç Searching for description ${descIndex}:`, {
          type: desc.type,
          textPreview: text.substring(0, 100) + '...',
          searchString: text.substring(0, 50)
        });

        // –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ body
        const walker = doc.createTreeWalker(
          doc.body,
          NodeFilter.SHOW_TEXT,
          null
        );

        let node;
        let found = false;

        // –§–ò–ö–°: –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥–ª–∞–≤ –∏–∑ –ø–æ–∏—Å–∫–∞
        let searchText = text;
        const chapterHeaderMatch = text.match(/^(–ì–ª–∞–≤–∞ (–ø–µ—Ä–≤–∞—è|–≤—Ç–æ—Ä–∞—è|—Ç—Ä–µ—Ç—å—è|—á–µ—Ç–≤–µ—Ä—Ç–∞—è|–ø—è—Ç–∞—è|—à–µ—Å—Ç–∞—è|—Å–µ–¥—å–º–∞—è|–≤–æ—Å—å–º–∞—è|–¥–µ–≤—è—Ç–∞—è|–¥–µ—Å—è—Ç–∞—è|–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–∞—è|–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–∞—è|—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–∞—è|—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–∞—è|–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è|—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è|—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–∞—è|–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–∞—è|–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è|–¥–≤–∞–¥—Ü–∞—Ç–∞—è|\d+))\s+/i);
        if (chapterHeaderMatch) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã
          searchText = text.substring(chapterHeaderMatch[0].length).trim();
          console.log(`üîß Removed chapter header from search: "${chapterHeaderMatch[0]}" -> searching for: "${searchText.substring(0, 50)}..."`);
        }

        if (searchText.length < 10) {
          console.log(`‚è≠Ô∏è Skipping description ${descIndex}: too short after header removal`);
          return;
        }

        while ((node = walker.nextNode())) {
          const nodeText = node.nodeValue || '';
          const index = nodeText.indexOf(searchText.substring(0, 50)); // –ò—â–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤

          if (index !== -1) {
            found = true;
            console.log(`‚úÖ Found match for description ${descIndex} at index ${index}`);
            highlightedCount++;
            const parent = node.parentNode;
            if (!parent || parent.classList?.contains('description-highlight')) {
              continue; // –£–∂–µ –≤—ã–¥–µ–ª–µ–Ω–æ
            }

            // –°–æ–∑–¥–∞–µ–º span –¥–ª—è highlight
            const span = doc.createElement('span');
            span.className = 'description-highlight';
            span.setAttribute('data-description-id', desc.id);
            span.setAttribute('data-description-type', desc.type);
            span.style.cssText = `
              background-color: rgba(96, 165, 250, 0.2);
              border-bottom: 2px solid #60a5fa;
              cursor: pointer;
              transition: background-color 0.2s;
            `;

            // Hover effect
            span.addEventListener('mouseenter', () => {
              span.style.backgroundColor = 'rgba(96, 165, 250, 0.3)';
            });
            span.addEventListener('mouseleave', () => {
              span.style.backgroundColor = 'rgba(96, 165, 250, 0.2)';
            });

            // Click handler
            span.addEventListener('click', () => {
              console.log('üñ±Ô∏è Description clicked:', desc.id);

              // –ù–∞—Ö–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
              const image = images.find(img => img.description?.id === desc.id);

              if (image) {
                console.log('üñºÔ∏è Found image for description:', image.image_url);
                setSelectedImage(image);
              } else {
                console.log('üé® No image generated yet, generating...');
                // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                imagesAPI.generateImageForDescription(desc.id)
                  .then(result => {
                    console.log('‚úÖ Image generated:', result.image_url);
                    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç GeneratedImage –¥–ª—è –ø–æ–∫–∞–∑–∞
                    const newImage: GeneratedImage = {
                      id: result.image_id,
                      description_id: result.description_id,
                      image_url: result.image_url,
                      generation_time: result.generation_time,
                      created_at: result.created_at,
                      description: desc,
                    };
                    setSelectedImage(newImage);
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    setImages(prev => [...prev, newImage]);
                  })
                  .catch(error => {
                    console.error('‚ùå Error generating image:', error);
                  });
              }
            });

            // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º span
            const before = nodeText.substring(0, index);
            const highlighted = nodeText.substring(index, index + searchText.length);
            const after = nodeText.substring(index + searchText.length);

            const beforeNode = before ? doc.createTextNode(before) : null;
            const afterNode = after ? doc.createTextNode(after) : null;

            span.textContent = highlighted;

            parent.insertBefore(span, node);
            if (beforeNode) parent.insertBefore(beforeNode, span);
            if (afterNode) parent.insertBefore(afterNode, span.nextSibling);
            parent.removeChild(node);

            console.log(`‚ú® Highlighted: "${highlighted.substring(0, 50)}..."`);
            break; // –í—ã–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
          }
        }

        if (!found) {
          console.warn(`‚ö†Ô∏è No match found for description ${descIndex}`);
        }
      } catch (error) {
        console.error('‚ùå Error highlighting description:', error);
      }
    });

    console.log(`üé® Highlighting complete: ${highlightedCount}/${descriptions.length} descriptions highlighted`);
  }, [descriptions, images]);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º highlights –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    console.log('üîç Highlight effect triggered:', {
      hasRendition: !!renditionRef.current,
      descriptionsCount: descriptions.length,
      renditionReady
    });

    if (!renditionReady || !renditionRef.current || descriptions.length === 0) {
      console.log('‚è∏Ô∏è Skipping highlights:', {
        renditionReady,
        hasRendition: !!renditionRef.current,
        descriptionsCount: descriptions.length
      });
      return;
    }

    const rendition = renditionRef.current;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º highlights –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞
    const handleRendered = () => {
      console.log('üìÑ Page rendered, applying highlights in 300ms...');
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã DOM —Ç–æ—á–Ω–æ –±—ã–ª –≥–æ—Ç–æ–≤
      setTimeout(() => {
        highlightDescriptionsInText();
      }, 300);
    };

    rendition.on('rendered', handleRendered);

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
    console.log('üöÄ Starting initial highlighting...');
    handleRendered();

    return () => {
      rendition.off('rendered', handleRendered);
    };
  }, [descriptions, highlightDescriptionsInText, renditionReady]);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  const handlePrevPage = useCallback(() => {
    if (renditionRef.current) {
      renditionRef.current.prev();
    }
  }, []);

  const handleNextPage = useCallback(() => {
    if (renditionRef.current) {
      renditionRef.current.next();
    }
  }, []);

  return (
    <div className="relative h-full w-full bg-gray-900">
      {/* EPUB Viewer - –≤—Å–µ–≥–¥–∞ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è */}
      <div ref={viewerRef} className="h-full w-full" />

      {/* Error overlay */}
      {error && (
        <div className="absolute inset-0 flex items-center justify-center bg-gray-900">
          <div className="text-center">
            <p className="text-red-400 mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏</p>
            <p className="text-gray-400 text-sm">{error}</p>
          </div>
        </div>
      )}

      {/* Loading overlay */}
      {isLoading && (
        <div className="absolute inset-0 flex items-center justify-center bg-gray-900">
          <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mb-4"></div>
            <p className="text-gray-300">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏...</p>
          </div>
        </div>
      )}

      {/* Navigation arrows - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {!isLoading && !error && (
        <>
          <button
            onClick={handlePrevPage}
            className="absolute left-4 top-1/2 -translate-y-1/2 w-12 h-12 bg-gray-800/80 hover:bg-gray-700 text-white rounded-full flex items-center justify-center transition-colors"
            aria-label="Previous page"
          >
            ‚Üê
          </button>
          <button
            onClick={handleNextPage}
            className="absolute right-4 top-1/2 -translate-y-1/2 w-12 h-12 bg-gray-800/80 hover:bg-gray-700 text-white rounded-full flex items-center justify-center transition-colors"
            aria-label="Next page"
          >
            ‚Üí
          </button>
        </>
      )}

      {/* Image Modal */}
      {selectedImage && (
        <ImageModal
          imageUrl={selectedImage.image_url}
          title={selectedImage.description?.type || 'Generated Image'}
          description={selectedImage.description?.content || ''}
          imageId={selectedImage.id}
          descriptionData={selectedImage.description ? {
            id: selectedImage.description.id,
            type: selectedImage.description.type,
            content: selectedImage.description.content,
            confidence_score: 0,
            priority_score: selectedImage.description.priority_score,
            entities_mentioned: []
          } : undefined}
          isOpen={!!selectedImage}
          onClose={() => setSelectedImage(null)}
          onImageRegenerated={(newImageUrl) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            setImages(prev =>
              prev.map(img =>
                img.id === selectedImage.id
                  ? { ...img, image_url: newImageUrl }
                  : img
              )
            );
          }}
        />
      )}
    </div>
  );
};
